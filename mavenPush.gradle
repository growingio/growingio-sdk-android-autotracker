apply plugin: 'maven-publish'
apply plugin: 'com.novoda.bintray-release'

void writePom(node) {
    def allDependencies = new HashSet<DependencySet>()
    allDependencies.addAll(configurations.api.allDependencies)
    allDependencies.addAll(configurations.releaseApi.allDependencies)
    allDependencies.addAll(configurations.releaseImplementation.allDependencies)
    allDependencies.addAll(configurations.implementation.allDependencies)
    def iterator = allDependencies.iterator()
    while (iterator.hasNext()) {
        def dep = iterator.next()
        if (dep.name == "unspecified" || dep.version == "unspecified") {
            iterator.remove()
        }
    }

    def depsNode = node.appendNode('dependencies')
    allDependencies.each { dep ->
        def depNode = depsNode.appendNode('dependency')
        depNode.appendNode('groupId', dep.group)
        depNode.appendNode('artifactId', dep.name)
        depNode.appendNode('version', dep.version)
    }
}

def getBintrayUserName() {
    return System.getenv("BINTRAY_USER_NAME")
}

def getBintrayApiKey() {
    return System.getenv("BINTRAY_API_KEY")
}

publish {
    bintrayUser = bintrayUserName
    bintrayKey = bintrayApiKey
    userOrg = BINTRAY_USER_ORG
    repoName = BINTARY_REPO_NAME
    groupId = GROUP_ID
    artifactId = ARTIFACT_ID
    publishVersion = releaseConfiguration.releaseVersion
    desc = BINTARY_DESC
    dryRun = false
    website = "https://github.com/growingio/growingio-sdk-android-autotracker"
    publications = ['releaseAgent']
}

afterEvaluate { project ->
    if (project.getPlugins().hasPlugin('com.android.library')) {
        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.source
        }

    } else {
        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }
    }

    publishing {
        publications {
            releaseAgent(MavenPublication) {
                groupId GROUP_ID
                artifactId ARTIFACT_ID
                version releaseConfiguration.releaseVersion
                if (project.getPlugins().hasPlugin('com.android.library')) {
                    artifact bundleReleaseAar
                    artifact androidSourcesJar
                    pom.withXml {
                        writePom(asNode())
                    }
                } else {
                    from components.java
                    artifact sourcesJar
                }
            }
        }
    }
}