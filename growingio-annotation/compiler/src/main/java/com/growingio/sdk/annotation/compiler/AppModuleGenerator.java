/*
 * Copyright (C) 2023 Beijing Yishu Technology Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.growingio.sdk.annotation.compiler;

import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.TypeSpec;

import java.util.Set;

import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;

import static com.growingio.sdk.annotation.compiler.ProcessUtils.GENERATED_APP_MODULE_IMPL_SIMPLE_NAME;
import static com.growingio.sdk.annotation.compiler.ProcessUtils.GENERATED_ROOT_MODULE_SIMPLE_NAME;
import static com.growingio.sdk.annotation.compiler.ProcessUtils.GIO_LOG_TAG;
import static com.growingio.sdk.annotation.compiler.ProcessUtils.GIO_TRACKER_CONTEXT_NAME;
import static com.growingio.sdk.annotation.compiler.ProcessUtils.GIO_TRACKER_CONTEXT_PACKAGE;
import static com.growingio.sdk.annotation.compiler.ProcessUtils.GROWINGIO_MODULE_NAME;
import static com.growingio.sdk.annotation.compiler.ProcessUtils.GROWINGIO_MODULE_PACKAGE_NAME;


/**
 * <p>The output file generated by this class with a AppModule looks like this:
 *
 * <pre>
 * <code>
 *  {@literal @SuppressWarnings("deprecation")}
 * final class GeneratedGioModuleImpl extends GeneratedGioModule {
 *  private final GrowingAppModule appModule;
 *
 *  public GeneratedGioModuleImpl() {
 *      Log.d("GIO", "Discovered GIOModule from annotation: com.growingio.android.okhttp3.OkhttpLibraryGioModule");
 *      appModule = new GrowingAppModule();
 *  }
 *
 *  {@literal @Override}
 *  public void registerComponents(TrackerContext context) {
 *      registerModule(new OkhttpLibraryGioModule(), context);
 *      registerModule(appModule, context);
 *  }
 *
 *  private void registerModule(LibraryGioModule module, TrackerContext context) {
 *      module.setupProviders(context.getProviderStore());
 *      module.registerComponents(context);
 *  }
 * }
 * </code>
 * </pre>
 *
 * @author cpacm 4/29/21
 */
final class AppModuleGenerator {
    private final ProcessUtils processUtils;

    AppModuleGenerator(ProcessUtils processUtils) {
        this.processUtils = processUtils;
    }

    void generate(TypeElement appModule, Set<String> gioModules) {
        ClassName appModuleClassName = ClassName.get(appModule);

        // constructor
        MethodSpec.Builder constructorBuilder =
                MethodSpec.constructorBuilder()
                        .addModifiers(Modifier.PUBLIC);
        ClassName androidLogName = ClassName.get("android.util", "Log");
        for (String moduleName : gioModules) {
            constructorBuilder.addStatement(
                    "$T.d($S, $S)",
                    androidLogName,
                    GIO_LOG_TAG,
                    "Discovered GIOModule from annotation: " + moduleName);
        }
        constructorBuilder.addStatement("appModule = new $T()", appModule);
        MethodSpec constructor = constructorBuilder.build();

        //register component
        MethodSpec.Builder registerComponents =
                MethodSpec.methodBuilder("registerComponents")
                        .addModifiers(Modifier.PUBLIC)
                        .addAnnotation(Override.class)
                        .addParameter(
                                ParameterSpec.builder(ClassName.get(GIO_TRACKER_CONTEXT_PACKAGE, GIO_TRACKER_CONTEXT_NAME), "context")
                                        //.addAnnotation(processorUtil.nonNull())
                                        .build());
        for (String module : gioModules) {
            ClassName moduleClassName = ClassName.bestGuess(module);
            registerComponents.addStatement("registerModule(new $T(), context)", moduleClassName);
        }
        registerComponents.addStatement("registerModule(appModule, context)");
        MethodSpec registerMethod = registerComponents.build();

        TypeSpec.Builder builder =
                TypeSpec.classBuilder(GENERATED_APP_MODULE_IMPL_SIMPLE_NAME)
                        .addModifiers(Modifier.FINAL)
                        .addAnnotation(
                                AnnotationSpec.builder(SuppressWarnings.class)
                                        .addMember("value", "$S", "deprecation")
                                        .build())
                        .superclass(
                                ClassName.get(
                                        GROWINGIO_MODULE_PACKAGE_NAME, GENERATED_ROOT_MODULE_SIMPLE_NAME))
                        .addField(appModuleClassName, "appModule", Modifier.PRIVATE, Modifier.FINAL)
                        .addMethod(constructor)
                        .addMethod(registerMethod)
                        .addMethod(generateModuleRegisterMethod());

        TypeSpec generatedGIOModule = builder.build();
        writeGioModule(generatedGIOModule);
    }

    private MethodSpec generateModuleRegisterMethod() {
        MethodSpec.Builder registerModule = MethodSpec.methodBuilder("registerModule")
                .addModifiers(Modifier.PRIVATE)
                .addParameter(ParameterSpec.builder(ClassName.get(GROWINGIO_MODULE_PACKAGE_NAME, GROWINGIO_MODULE_NAME), "module").build())
                .addParameter(ParameterSpec.builder(ClassName.get(GIO_TRACKER_CONTEXT_PACKAGE, GIO_TRACKER_CONTEXT_NAME), "context").build())
                .addStatement("module.setupProviders(context.getProviderStore())")
                .addStatement("module.registerComponents(context)");

        return registerModule.build();
    }

    private void writeGioModule(TypeSpec appModule) {
        processUtils.writeClass(GROWINGIO_MODULE_PACKAGE_NAME, appModule);
    }
}
