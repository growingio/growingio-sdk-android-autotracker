apply plugin: 'com.android.library'
apply plugin: 'jacoco'

android {
    compileSdkVersion buildConfiguration.compileVersion
    defaultConfig {
        minSdkVersion buildConfiguration.minSdkVersion
        targetSdkVersion buildConfiguration.targetSdkVersion
        versionName releaseConfiguration.releaseVersion
        versionCode releaseConfiguration.releaseVersionCode
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'consumer-proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility buildConfiguration.sourceCompatibility
        targetCompatibility buildConfiguration.targetCompatibility
    }
    lintOptions {
        abortOnError false
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

afterEvaluate { project ->
    android.libraryVariants.each { variant ->
        tasks.getByName("test${variant.name.capitalize()}UnitTest") {
            finalizedBy "jacocoTestReport"
        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*',
                      '**/data/models/*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])

}

dependencies {
    testImplementation libraries.test.junit
    testImplementation libraries.test.mockito_core
    testImplementation libraries.test.powermock_api_mockito2
    testImplementation libraries.test.powermock_module_junit4
    testImplementation libraries.test.powermock_module_junit4_rule
    testImplementation libraries.test.truth
    testImplementation libraries.test.json
    testImplementation fileTree(dir: '../thirdLibs', include: ['*.jar'])
    testImplementation libraries.others.x5_webview

    compileOnly fileTree(dir: '../thirdLibs', include: ['*.jar'])
    debugApi project(':growingio-tracker-core')
    releaseApi libraries.growingio.tracker_core
    implementation project(':inject-annotation')
    annotationProcessor project(':inject-compiler')

    compileOnly libraries.androidx.appcompat
    compileOnly libraries.androidx.recyclerview
    compileOnly libraries.android.appcompat
    compileOnly libraries.android.recyclerview
    compileOnly libraries.others.x5_webview
}

apply from: "${project.rootProject.file('mavenPush.gradle')}"
