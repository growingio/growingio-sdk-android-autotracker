/*
 *   Copyright (c) 2022 Beijing Yishu Technology Co., Ltd.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'signing'

def getSelectVersion(){
    def version = releaseConfiguration.releaseVersion
    if (project.hasProperty('CI_SELECT_MODULE') && project.hasProperty("CI_SELECT_VERSION")) {
        def cmdModuleId = CI_SELECT_MODULE
        def moduleId = POM_ARTIFACT_ID
        if (cmdModuleId == moduleId && CI_SELECT_VERSION != "DEFAULT")
            return CI_SELECT_VERSION
    }
    return version
}

version = getSelectVersion()
group = GROUP

@SuppressWarnings("GrMethodMayBeStatic")
def isReleaseBuild() {
    return !version.contains("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
}

def getRepositoryUsername() {
    return hasProperty('USERNAME') ? USERNAME : (hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : '')
}

def getRepositoryPassword() {
    return hasProperty('PASSWORD') ? PASSWORD : (hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : '')
}

def configurePom(pom) {
    pom.name = POM_NAME
    pom.description = POM_DESCRIPTION
    pom.url = POM_URL

    pom.scm {
        url = POM_SCM_URL
        connection = POM_SCM_CONNECTION
        developerConnection = POM_SCM_DEV_CONNECTION
        tag = 'HEAD'
    }

    pom.licenses {
        license {
            name = POM_LICENCE_NAME
            url = POM_LICENCE_URL
            distribution = POM_LICENCE_DIST
        }
    }

    pom.issueManagement {
        system = 'GitHub Issues'
        url = POM_SCM_ISSUES
    }

    pom.organization {
        name = POM_COMPANY
        url = POM_OFFICIAL_WEBSITE
    }

    pom.developers {
        developer {
            id = POM_DEVELOPER_ID
            name = POM_DEVELOPER_NAME
            email = POM_DEVELOPER_EMAIL
        }
    }
}


publishing {
    publications {
        bom(MavenPublication) {
            from components.javaPlatform

            artifactId = POM_ARTIFACT_ID
            version = version
            pom {
                configurePom(owner)
            }
        }
    }
    // Publish to build output repository.
    repositories {
        maven {
            def releasesRepoUrl = getReleaseRepositoryUrl()
            def snapshotsRepoUrl = getSnapshotRepositoryUrl()
            url = isReleaseBuild() ? releasesRepoUrl : snapshotsRepoUrl
            credentials(PasswordCredentials) {
                username = getRepositoryUsername()
                password = getRepositoryPassword()
            }
        }
    }
}

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("publish") }
    publishing.publications.all { publication ->
        sign publication
    }
}

apply from: "${rootProject.projectDir}/gradle/existDenpendices.gradle"